# Docker container for Centos 6.9

FROM centos:6.9
MAINTAINER build-team@couchbase.com

# Create couchbase user with password-less sudo privs, and give
# ownership of /opt/couchbase
RUN groupadd -g1000 couchbase && \
    useradd couchbase -g couchbase -u1000 -G wheel -m -s /bin/bash && \
    mkdir /opt/couchbase && chown -R couchbase:couchbase /opt/couchbase && \
    mkdir -p /etc/sudoers.d && \
    echo 'couchbase:couchbase' | chpasswd && \
    echo '%wheel ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers.d/wheel_group && \
    echo 'Defaults:%wheel !requiretty' >> /etc/sudoers.d/wheel_group && \
    chmod 440 /etc/sudoers.d/wheel_group

### Install Couchbase build dependencies ######################################
# * Packages from the base CentOS repository
RUN yum install --setopt=keepcache=0 -y epel-release && \
    yum install --setopt=keepcache=0 -y \
    sudo \
    bzip2-devel \
    centos-release-scl \
    http://opensource.wandisco.com/centos/6/git/x86_64/wandisco-git-release-6-1.noarch.rpm \
    glibc.i686 \
    krb5-libs \
    libunwind \
    libnghttp2-devel \
    libidn-devel \
    libuuid \
    lttng-ust \
    libuv-devel \
    libev-devel \
    libevent-devel \
    libffi-devel \
    libxml2-devel \
    libxslt \
    numactl-devel \
    openssl-devel \
    openssh-clients \
    redhat-lsb-core \
    rpm-build \
    tar \
    unzip \
    which \
    zlib-devel \
    curl \
    wget \
    java-1.8.0-openjdk && \
    yum clean packages

# devtoolset 6 (plus git from wandisco)
RUN yum install --setopt=keepcache=0 -y \
    git \
    devtoolset-6-gcc \
    devtoolset-6-gcc-c++ \
    devtoolset-6-binutils \
    devtoolset-6-make \
    devtoolset-6-elfutils && \
    yum clean packages && \
    for file in /opt/rh/devtoolset-6/root/usr/bin/*; do ln -s $file /usr/local/bin; done

# Pre-compiled libicu for .NET Core
# https://github.com/dotnet/core/blob/master/Documentation/build-and-install-rhel6-prerequisites.md
RUN curl -o /tmp/icu.tgz http://download.icu-project.org/files/icu4c/57.1/icu4c-57_1-RHEL6-x64.tgz && \
    tar -xf /tmp/icu.tgz -C / && \
    rm /tmp/icu.tgz

# Build Curl 7.45 for .NET Core
# https://github.com/dotnet/core/blob/master/Documentation/build-and-install-rhel6-prerequisites.md
RUN mkdir /tmp/deploy && \
    cd /tmp/deploy && \
    wget https://curl.haxx.se/download/curl-7.45.0.tar.gz && \
    tar xf curl-7.45.0.tar.gz && \
    cd curl-7.45.0 && \
    ./configure \
      --disable-dict \
      --disable-file \
      --disable-ftp \
      --disable-gopher \
      --disable-imap \
      --disable-ldap \
      --disable-ldaps \
      --disable-libcurl-option \
      --disable-manual \
      --disable-pop3 \
      --disable-rtsp \
      --disable-smb \
      --disable-smtp \
      --disable-telnet \
      --disable-tftp \
      --enable-ipv6 \
      --enable-optimize \
      --enable-symbol-hiding \
      --with-ca-bundle=/etc/pki/tls/certs/ca-bundle.crt \
      --with-nghttp2 \
      --with-gssapi \
      --with-ssl \
      --without-librtmp \
      --prefix=/usr/local && \
    make -j4 && make install && \
    cd /tmp && \
    rm -rf deploy

# Repo
RUN curl https://storage.googleapis.com/git-repo-downloads/repo \
    -o /usr/local/bin/repo && \
    chmod a+x /usr/local/bin/repo

# CMake
RUN mkdir /tmp/deploy && \
    curl -L https://cmake.org/files/v3.9/cmake-3.9.4-Linux-x86_64.sh -o /tmp/deploy/cmake.sh && \
    (echo y ; echo n) | sh /tmp/deploy/cmake.sh --prefix=/usr/local && \
    rm /usr/local/bin/cmake-gui && \
    rm -rf /tmp/deploy

# Jenkins Swarm client jar
RUN curl https://repo.jenkins-ci.org/releases/org/jenkins-ci/plugins/swarm-client/3.8/swarm-client-3.8.jar -o /usr/local/lib/swarm-client.jar

# Ensure /opt/cbdeps is writable
RUN mkdir /opt/cbdeps && \
    chown couchbase:couchbase /opt/cbdeps && \
    chmod 755 /opt/cbdeps

# Build tools
RUN curl https://bintray.com/sbt/rpm/rpm > /etc/yum.repos.d/bintray-sbt-rpm.repo && \
    sudo yum install -y --setopt=keepcache=0 sbt
RUN mkdir /tmp/deploy && \
    curl -L -o /tmp/deploy/gradle.zip https://services.gradle.org/distributions/gradle-4.10-bin.zip && \
    curl -L -o /tmp/deploy/maven.zip http://apache.mirrors.tds.net/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.zip && \
    cd /usr/local && \
    unzip /tmp/deploy/gradle.zip && \
    unzip /tmp/deploy/maven.zip && \
    ln -s /usr/local/apache-maven-*/bin/mvn /usr/local/gradle-*/bin/gradle /usr/local/bin && \
    rm -rf /tmp/deploy

# libcouchbase
RUN mkdir /tmp/deploy && \
    cd /tmp/deploy && \
    curl -L -o couchbase-release.rpm http://packages.couchbase.com/releases/couchbase-release/couchbase-release-1.0-4-x86_64.rpm && \
    rpm -iv couchbase-release.rpm && \
    yum install -y libcouchbase-devel libcouchbase2-libevent libcouchbase2-libev libcouchbase2-bin && \
    cd /tmp && \
    rm -rf /tmp/deploy

# autoconf et al for building PHP cbdep packages
RUN mkdir /tmp/deploy && \
    cd /tmp/deploy && \
    curl -L -O http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz && \
    tar zxf autoconf-2.69.tar.gz && \
    cd autoconf-2.69 && \
    ./configure && \
    make && make install && \
    cd /tmp && \
    rm -rf /tmp/deploy

# Temp install step for "cbdep" tool
ARG CACHEBUST=1
RUN curl http://downloads.build.couchbase.com/cbdep/cbdep.linux -o /usr/local/bin/cbdep && chmod 755 /usr/local/bin/cbdep

# Run our builder startup script
COPY build/couchbuilder_start.sh /usr/sbin/
ENTRYPOINT [ "/usr/sbin/couchbuilder_start.sh" ]
CMD [ "swarm" ]

# Ensure appropriate directories exist and are owned by 'couchbase'
USER couchbase
RUN mkdir /home/couchbase/.ssh

# Keep this stuff at the end, because the ARG declaration breaks Docker build caching
ARG CONTAINER_TAG_ARG
ENV CONTAINER_TAG=${CONTAINER_TAG_ARG}
